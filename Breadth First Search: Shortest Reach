import java.util.*;
class Graph
{
    int V;
    LinkedList<Integer> adj[];
    Graph(int v)
    {
        V = v;
        adj = new LinkedList[V];
        
        for(int i =0;i< V;i++)
        {
            adj[i] = new LinkedList();
        }
    }
    void addEdge(int src,int dest)
    {
        adj[src].add(dest);
        adj[dest].add(src);
    }
   
    int[] bfs(int s)
    {
        int distances[] = new int[V];
        Arrays.fill(distances, -1);
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.add(s);
        distances[s] =0;
        while(!queue.isEmpty())
        {
            int temp = queue.poll();
            
            for(int i : adj[temp])  
            {
                if(distances[i] == -1)
                {
                    distances[i] = distances[temp] + 6;
                    queue.add(i);
                    
                }
               
            }
        }
        return distances;
    }
}
public class Solution {
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        while(q-- > 0)
        {
            int v = sc.nextInt();
            int e = sc.nextInt();
            
            Graph graph = new Graph(v + 1);
            while(e-- > 0)
            {
                int src = sc.nextInt() ;
                int dest = sc.nextInt() ;
                graph.addEdge(src,dest);
            }
            int start = sc.nextInt() ;
            int result[] = graph.bfs(start);
            
            for(int i =1;i<result.length;i++)
            {
                if(i != start)
        System.out.print(result[i] + " ");
            }
        System.out.println();
        }
    }

}
