import java.util.*;
class Edge implements Comparable<Edge>
{
    int src,dest,weight;

    @Override
    public int compareTo(Edge o) {
        return this.weight - o.weight;
    }
}
class Subset
{
    int parent,rank;
}

public class Solution {
     Edge edge[];
    static  int V ;
    static  int E ;
    public Solution(int v, int e) {
        V = v;
        E = e;
         edge = new Edge[e];
        
        for(int i = 0;i< e;i++)
        {
            edge[i] = new Edge();
        }
    }

    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        
        int v = sc.nextInt();
        
        int e = sc.nextInt();
        
        Solution graph = new Solution(v,e);
        
        for(int i =0;i < e;i++)
        {
            graph.edge[i].src = sc.nextInt() - 1;
            graph.edge[i].dest =sc.nextInt() - 1;
            graph.edge[i].weight =sc.nextInt();
        }
             
            
            
        
        graph.KruskalMst();
        sc.close();
    }

     void KruskalMst() {
        Edge result[] = new Edge[V];
        int e = 0;
        int i = 0;
        for (i = 0;i< V;i++)
        {
            result[i] = new Edge();
        }
        Arrays.sort(edge);
        Subset subsets[] = new Subset[V];
        
        for(i = 0;i < V;i++)
        {
            subsets[i] = new Subset();
        }
        for(int v = 0;v < V;v++)
        {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }
        i =0;
        
        while(e < V - 1)
        {
            Edge next_edge = new Edge();
            next_edge = edge[i++];
            
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);
            
            if(x != y)
            {
                result[e++] = next_edge;
                Union(subsets,x,y);
                
            }
            
        }
        int sum =0;
        for(int iq =0;iq < e  ;iq++)
        {
            sum +=result[iq].weight;
        }
        System.out.println(sum);
        
    }

     void Union(Subset subsets[], int x, int y) 
        { 
            int xroot = find(subsets, x); 
            int yroot = find(subsets, y); 
      
    
            if (subsets[xroot].rank < subsets[yroot].rank) 
                subsets[xroot].parent = yroot; 
            else if (subsets[xroot].rank > subsets[yroot].rank) 
                subsets[yroot].parent = xroot; 
      
          
            else
            { 
                subsets[yroot].parent = xroot; 
                subsets[xroot].rank++; 
            } 
        } 
    private int find(Subset[] subsets, int x) {
        if(subsets[x].parent != x)
            subsets[x].parent = find(subsets , subsets[x].parent);
        return subsets[x].parent;
    }

}
